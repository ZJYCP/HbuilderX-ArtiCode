name: Build and Release Frontend

# 定义触发条件
on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Select a tag to release (e.g., v1.0.0). Check existing tags in the "Releases" or "Tags" section.'
        required: true
env:
  RELEASE_NAME: articode-frontend-${{ github.event.inputs.tag_name }}
jobs:
  # Job 1: 构建和打包前端
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 添加写入权限
    steps:
      # 1. 检出指定 tag 的代码
      - name: Checkout code with specific tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_name }} # 使用手动输入的 tag

      # 2. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 根据你的项目调整 Node.js 版本

      # 3. 安装依赖
      - name: Install dependencies
        run: npm install # 如果用 yarn，可以改为 yarn install

      # 4. 构建前端项目
      - name: Build project
        run: npm run build

      # 5. 使用 pnpm zip 打包特定文件
      - name: Package release files
        run: pnpm run zip ${{ env.RELEASE_NAME }}

      # 6. 上传打包好的特定文件
      - name: Upload packaged file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}
          path: release/${{env.RELEASE_NAME}}.zip

  # Job 2: 创建 Release 并上传资产
  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write # 添加写入权限
    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 下载构建的 artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build

      # 3. 创建 GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name }} # 使用手动输入的 tag
          release_name: Release ${{ github.event.inputs.tag_name }}
          draft: false
          prerelease: false

      # 4. 上传 zip 文件作为 Release 的 asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.RELEASE_NAME }}.zip
          asset_name: ${{ env.RELEASE_NAME }}.zip
          asset_content_type: application/zip
